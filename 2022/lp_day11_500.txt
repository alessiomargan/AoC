Timer unit: 1e-09 s

Total time: 0.0973281 s
File: /tmp/ipykernel_9941/2791215050.py
Function: spin_rounds at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def spin_rounds(rounds: int, part_a=True):
     2         1     174421.0 174421.0      0.2      mnk_od = OrderedDict({k:Monkey.from_dict(v) for (k,v) in monkeys.items()})
     3         1        134.0    134.0      0.0      round_count = 0
     4       500      78681.0    157.4      0.1      while round_count < rounds :
     5       500      93890.0    187.8      0.1          next_mnk_od = OrderedDict()
     6      2000     376308.0    188.2      0.4          while len(mnk_od) :
     7      2000     336715.0    168.4      0.3              next_round_items = deque()
     8      2000     576019.0    288.0      0.6              num,mnk = mnk_od.popitem(last=False)
     9      7690    1367739.0    177.9      1.4              while len(mnk.items) :
    10                                                           # turn function pop items and count inspected items ...
    11      7690   90678586.0  11791.8     93.2                  worry_level,throw_to = turn(mnk, part_a)
    12                                                           #print("[{}] worry level {} throw to {}".format(num,worry_level,throw_to))
    13      5000     649586.0    129.9      0.7                  if throw_to in mnk_od :
    14      2690     602479.0    224.0      0.6                      mnk_od[throw_to].items.append(worry_level)
    15      5000     510246.0    102.0      0.5                  elif throw_to in next_mnk_od :
    16      5000    1057855.0    211.6      1.1                      next_mnk_od[throw_to].items.append(worry_level)               
    17                                                           else:
    18                                                               next_round_items.append(worry_level)
    19                                                       #
    20      2000     322749.0    161.4      0.3              mnk.items = next_round_items
    21      2000     292983.0    146.5      0.3              next_mnk_od[num] = mnk
    22                                                       #pp.pprint(next_mnk_od)
    23                                                   # 1 round completed
    24       500      62271.0    124.5      0.1          round_count += 1
    25       500      79167.0    158.3      0.1          assert(len(mnk_od) == 0)
    26       500      68147.0    136.3      0.1          mnk_od = next_mnk_od
    27                                               #
    28         1         89.0     89.0      0.0      return mnk_od

Total time: 0.0768286 s
File: /tmp/ipykernel_9941/2927877839.py
Function: turn at line 34

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    34                                           def turn(mnk, part_a=True):
    35      7690     575058.0     74.8      0.7      worry_level = 0
    36      7690    1371129.0    178.3      1.8      item = mnk.items.popleft()
    37      7690    1624332.0    211.2      2.1      mnk.cnt_inspected += 1 
    38      7690    1053081.0    136.9      1.4      _op1 = item if mnk.op1 == "old" else mnk.op1
    39      7690    1099911.0    143.0      1.4      _op2 = item if mnk.op2 == "old" else mnk.op2
    40                                               #worry_level = mnk.op( _op1,_op2)
    41      4991     551695.0    110.5      0.7      if mnk.op == "+":
    42      4991    3384549.0    678.1      4.4          worry_level = _op1 + _op2
    43      2699     312908.0    115.9      0.4      elif mnk.op == "*":
    44      2699   28765912.0  10658.0     37.4          worry_level = _op1 * _op2
    45                                                   #worry_level = karatsuba(_op1,_op2)
    46                                               else :
    47                                                   assert(0)
    48      7690     704586.0     91.6      0.9      if part_a :
    49                                                   worry_level = math.floor(worry_level/3)
    50      7384   36485784.0   4941.2     47.5      if worry_level % mnk.test_div == 0 : 
    51       306      35738.0    116.8      0.0          return worry_level,mnk.if_true
    52                                               else :
    53      7384     863913.0    117.0      1.1          return worry_level,mnk.if_false